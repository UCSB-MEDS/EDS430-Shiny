---
format: revealjs
---

##  {#themeing data-menu-title="~~~ Themeing Shiny Apps ~~~" background="#053660"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">`r fontawesome::fa("paintbrush", fill = "#d2e3f3", a11y = "sem")` Styling & Themeing shiny apps</p>
<p class="caption-text">*We've built some really cool apps so far, but they all have a pretty standard and similar appearance. In this section, we'll explore a few different approaches for styling your apps.*</p>
</div>

---

##  {#LO-themeing data-menu-title="Learning Objectives (Themeing)"}

<div class="slide-title">`r fontawesome::fa("book-open", fill = "#05859B", a11y = "sem")` Learning Objectives</div>

<p class="medium-body-text bottombr">By the end of this section, you should be equipped with:</p>

. . . 


<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` a number of different approaches for themeing and styling your shiny apps and dashboards</p>

. . . 

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` tbd</p>

. . .

<p class="medium-body-text topbr">New packages used:</p> 

. . . 

<p class="small-text">`r fontawesome::fa("box-open", fill = "#05859B", a11y = "sem")` `{bslib}`: tbd</p>

. . . 

<p class="small-text">`r fontawesome::fa("box-open", fill = "#05859B", a11y = "sem")` `{fresh}`: tbd</p>

---

##  {#bslib data-menu-title="{bslib}"}

<div class="slide-title">Using the [`{bslib}` package](https://rstudio.github.io/bslib/) to theme Shiny apps</div>

<p class="body-text">The [`{bslib}` package](https://rstudio.github.io/bslib/) provides tools for customizing [Bootstrap themes](https://getbootstrap.com/docs/4.6/getting-started/theming/) directly from R, making custom themeing for Shiny apps (and R Markdown docs!) quite easy.</p>

<br>

:::: {.columns}

::: {.column width="45%"}
<center><p class="medium-body-text">Pros:</p></center>
<p class="small-text">`r fontawesome::fa("check", fill = "#05859B", a11y = "sem")` easy to use</p>
<p class="small-text">`r fontawesome::fa("check", fill = "#05859B", a11y = "sem")` includes a [real-time themeing widget](https://testing-apps.shinyapps.io/themer-demo/) to try out themes before applying them to your own app</p>
<p class="small-text">`r fontawesome::fa("check", fill = "#05859B", a11y = "sem")` plays well with the `{thematic}` package for matching plot styling to app</p>
:::

::: {.column width="4%"}
:::

::: {.column width="45%"}
<center><p class="medium-body-text">Cons:</p></center>
<p class="small-text">`r fontawesome::fa("xmark", fill = "#05859B", a11y = "sem")` does **not** work with `shinydashboard` (`{bslib}` is only intended for use with `shiny` *apps*)</p>
<p class="small-text">`r fontawesome::fa("xmark", fill = "#05859B", a11y = "sem")` styling is contained by the arguments available to `bs_theme()`</p>
<p class="small-text">`r fontawesome::fa("xmark", fill = "#05859B", a11y = "sem")` some `shinyWidgets` may break when a `bslib` theme is applied (e.g. `pickerInput`s in our `two-file-app`) (at the time of writing this, Jan 2023).</p>
:::

::::

<br>

. . . 

<center><p class="body-text topbr">**Let's practice applying new themes using `bslib` to our `one-file-app` (i.e. App #1)**</p></center>

---

##  {#bslib-prebuilt-themes data-menu-title="Pre-built themes with {bslib}"}

<div class="slide-title">Apply a pre-built theme with {bslib}</div>

<p class="small-text topbr">By default, Shiny uses the Bootstrap v3 theme (which is not so exciting). Change the theme to a slightly more modern Bootstrap v5 theme by setting the `theme` argument of `fluidPage()` to `bslib::bs_theme(version = 5)`, *or* supply `bs_theme()` with a pre-built bootswatch theme, as shown below (for a list of theme names, run `bootswatch_themes()` in your console):</p>

:::: {.columns}

::: {.column width="45%"}

<br>
<br>

```{r}
#| eval: false
#| echo: true
ui <- fluidPage(
  
  theme = bslib::bs_theme(bootswatch = "solar")
  
  # ~ additional UI code omitted for brevity ~
  
)
```
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
<center><img src="images/solar.png" alt="" width="550"/></center>
:::

::::

---

##  {#bslib-custom-themes data-menu-title="Custom themes with {bslib}"}

<div class="slide-title">Create a custom theme with {bslib}</div>

<p class="small-text">Alternatively, you can fully customize your own theme. Explore the [`bslib` vignette](https://rstudio.github.io/bslib/articles/bslib.html) for detailed instructions. A small example here:</p>

:::: {.columns}

::: {.column width="45%"}

<br>

```{r}
#| eval: false
#| echo: true
ui <- fluidPage(
  
  theme = bslib::bs_theme(
    bg = "#A36F6F", # background color
    fg = "#FDF7F7", # foreground color
    primary = "#483132", # primary accent color
    base_font = font_google("Pacifico"))
  
  # ~ additional UI code omitted for brevity ~
  
)
```
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
<center><img src="images/custom-bslib.png" alt="" width="550"/></center>
:::

::::

<p class="small-text">Be sure to check out the interactive themeing widget to test custom color/font/etc. combos before committing by running `bs_theme_preview()` in your console, or visit the hosted version [here](https://testing-apps.shinyapps.io/themer-demo/). You can also call `bs_themer()` within your `server` function to open the theme customization UI alongside your own app.</p>

----

##  {#thematic data-menu-title="{thematic} for plot themeing"}

<div class="slide-title-smaller">Use {thematic} to extend your theme to plots</div>

<p class="small-text">You probably noticed that our scatterplot looks a little silly against the darker background of our themed app. Enter the [`{thematic}` package](https://rstudio.github.io/thematic/index.html), which is built to help simplify plot themeing. Call `thematic_shiny()` before launching your app to generate plots that reflect your application's `bs_theme()`. For example:</p>

:::: {.columns}

::: {.column width="45%"}

<br>

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "1"
thematic::thematic_shiny()

ui <- fluidPage(
  
  theme = bslib::bs_theme(
    bg = "#A36F6F", # background color
    fg = "#FDF7F7", # foreground color
    primary = "#483132", # primary accent color
    base_font = font_google("Pacifico"))
  
  # ~ additional UI code omitted for brevity ~
  
)
```
:::


::: {.column width="5%"}
:::

::: {.column width="45%"}
<center><img src="images/bslib-thematic.png" alt="" width="550"/></center>
:::

::::

<p class="small-text">Read the [vignette](https://rstudio.github.io/thematic/index.html) to learn more about using the `thematic` package to help match plot fonts to the fonts applied across your app.</p>

---

##  {#fresh data-menu-title="{fresh}"}

<div class="slide-title">Using the [`{fresh}` package](https://dreamrs.github.io/fresh/) to theme Shiny apps & dashboards</div>

<p class="body-text">The [`{fresh}` package](https://dreamrs.github.io/fresh/) provides tools for creating custom themes to use in Shiny apps *and* dashboards -- set parameters of your theme using `create_theme()`, generate a stylesheet based off your specifications, and apply your stylesheet to your app.</p>

<br>

:::: {.columns}

::: {.column width="45%"}
<center><p class="medium-body-text">Pros:</p></center>
<p class="small-text">`r fontawesome::fa("check", fill = "#05859B", a11y = "sem")` easy to use</p>
<p class="small-text">`r fontawesome::fa("check", fill = "#05859B", a11y = "sem")` supports theme creation for *both* shiny apps and dashboards (and also `{flexdashboard}`s and `{b4dash}` applications) </p>
:::

::: {.column width="4%"}
:::

::: {.column width="45%"}
<center><p class="medium-body-text">Cons:</p></center>
<p class="small-text">`r fontawesome::fa("xmark", fill = "#05859B", a11y = "sem")` styling is constrained by the variables available to `create_theme()`</p>
:::

::::

<br>

. . . 

<center><p class="body-text topbr">**Let's practice applying new themes using `fresh` to our `two-file-app` (i.e. App #2) and our `shinydashbaord` (i.e. App #3)**</p></center>

---

##  {#fresh-workflow data-menu-title="{fresh} workflow"}

<div class="slide-title">A general workflow for using `fresh` themes</div>

<p class="body-text topbr">Whether you're working on a shiny *app* or a shiny *dashboard*, you'll need the following:</p>

<p class="small-text topbr">**1.** a `/www` folder within your app's directory -- this is where we'll save the stylesheet (a `.css` file) that `fresh` will generate for us</p>
<p class="small-text topbr">**2.** a separate script for building our theme using the `create_theme()` function -- I recommend saving this to `~/R` (it seemed to cause issues when saved anywhere within my app directory)</p>

. . .

<p class="body-text topbr">Importantly, `create_theme()` takes **different variables** to set the parameters of your theme, depending on what type of app you're building: for **shiny apps**, you'll need to use [`bs_vars_*` variables](https://dreamrs.github.io/fresh/articles/vars-shiny.html), and for **shiny dashboards** you'll use [`adminlte_*` variables](https://dreamrs.github.io/fresh/articles/vars-shinydashboard.html) (examples on the following slides).</p>

<p class="body-text topbr">There are also a [couple ways](https://cran.r-project.org/web/packages/fresh/vignettes/fresh.html) to apply your finished theme to your app, but we'll use the method of generating a `.css` file, then calling those styles into our app.</p>

---

##  {#create-fresh-app-theme data-menu-title="Create {fresh} app theme"}

<div class="slide-title-smaller">Creating a `fresh` theme for `two-file-app`</div>

<p class="small-text">In this example, we update the colors of our app's body, navbar, and tabPanels using the appropriate `fresh` [variables for shiny *apps*](https://dreamrs.github.io/fresh/articles/vars-shiny.html). We specify a file path, `two-file-app/www` (you'll need to create the `/www` directory, since we don't have one yet), where our stylesheet (e.g. `shiny_fresh_themes.css`, as shown here) file will be saved to.</p>

<p class="small-text">Of course, these color combos are *not* recommended, but chosen purely for demonstration purposes `r fontawesome::fa("face-smile-wink", fill = "#05859B", a11y = "sem")`.</p>

```{r}
#| eval: false
#| echo: true
# in a separate script: ~/R/create_fresh_theme_shiny.R
# load library ----
library(fresh)

# create theme -----
create_theme(
  
  # you can supply a bootstrap theme to begin with
  theme = "default",

  # global styling
  bs_vars_global(
    body_bg = "#D2D0CA", # beige
    text_color = "#F23ACB", # hot pink
    link_color = "#0E4BE3" # royal blue
  ),

  bs_vars_navbar(
    default_bg = "#13CC13", # lime green
    default_color = "#66656C" # gray
  ),

  # tabPanels
  bs_vars_tabs(
    border_color = "#F90909" # red
  ),

  # generate css file
  output_file = "two-file-app/www/shiny_fresh_theme.css"
)

```

---

##  {#apply-fresh-apps-theme data-menu-title="Apply {fresh} app theme"}

<div class="slide-title-smaller">Apply a `fresh` theme to our app</div>

<p class="body-text">To apply our theme, provide the `theme` argument of your `fluidPage()` or `navbarPage()` with the name of our stylesheet. **Note:** shiny knows to look in the `/www` directory, so you can omit that from your file path, as shown below:</p>

<br>

:::: {.columns}

::: {.column width="45%"}

<br>
<br>

```{r}
#| eval: false
#| echo: true
# navbar page ----
ui <- navbarPage(

  theme = "shiny_fresh_theme.css"
  
  # ~ additional UI code omitted for brevity ~
  
) # END navbarPage
```
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
<center><img src="images/fresh_app.gif" alt="" width="550"/></center>
:::

::::

---

##  {#fresh-shinydashboard data-menu-title="{fresh} shiny dashboard"}

<div class="slide-title-smaller">Creating a `fresh` theme for our `shinydashboard`</div>

<p class="smaller-text">In this example, we update the colors of our app's header, body, and sidebar using the appropriate `fresh` [variables for shiny *dashboards*](https://dreamrs.github.io/fresh/articles/vars-shinydashboard.html). We specify a file path, `shinydashboard/www` where our stylesheet (e.g. `shinydashboard_fresh_themes.css`, as shown here) file will be saved to. Again, these color combos are *not* recommended, but chosen purely for demonstration purposes.</p>

```{r}
#| eval: false
#| echo: true
# in a separate script: ~/R/create_fresh_theme_shinydashboard.R
# load libraries ----
library(fresh)

# create theme ----
create_theme(
  
  # change "light-blue"/"primary" color
  adminlte_color(
    light_blue = "#150B5A" # dark blue
  ),
  
  # dashboardBody styling (includes boxes)
  adminlte_global(
    content_bg = "#E7B5B5" # blush pink
  ),
  
  # dashboardSidebar styling
  adminlte_sidebar(
    width = "400px", 
    dark_bg = "#57F8F3", # light blue
    dark_hover_bg = "#BF21E6", # magenta
    dark_color = "#F90000" # red
  ),
  
  # generate css file
  output_file = "shinydashboard/www/shinydashboard_fresh_theme.css"
  
)
```

---

##  {#apply-fresh-dashboard-theme data-menu-title="Apply {fresh} dashboard theme"}

<div class="slide-title-smaller">Apply a `fresh` theme to our dashboard</div>

<p class="body-text">To apply our theme, use the `fresh::use_theme()` function inside your `dashboardBody`, providing it with the name of your stylesheet. **Note:** shiny knows to look in the `/www` directory, so you can omit that from your file path, as shown below:</p>

<br>

:::: {.columns}

::: {.column width="45%"}

<br>

```{r}
#| eval: false
#| echo: true
body <- dashboardBody(
  
  # set theme
  fresh::use_theme("shinydashboard_fresh_theme.css")
  
  # ~ additional dashboardBody code omitted for brevity ~
  
)
```
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
<center><img src="images/fresh-dashboard.gif" alt="" width="550"/></center>
:::

::::

---

##  {#sass-css data-menu-title="Sass & CSS"}

<div class="slide-title">Using Sass & CSS to style Shiny apps & dashboards</div>

<p class="body-text">text here</p>

<br>

:::: {.columns}

::: {.column width="45%"}
<center><p class="medium-body-text">Pros:</p></center>
<p class="small-text">`r fontawesome::fa("check", fill = "#05859B", a11y = "sem")` applies to any web page (not just shiny apps)</p>
<p class="small-text">`r fontawesome::fa("check", fill = "#05859B", a11y = "sem")` can get real fine-tuned styling done</p>
:::

::: {.column width="4%"}
:::

::: {.column width="45%"}
<center><p class="medium-body-text">Cons:</p></center>
<p class="small-text">`r fontawesome::fa("xmark", fill = "#05859B", a11y = "sem")` more complex</p>
:::

::::

<br>

. . . 

<center><p class="body-text topbr">**We'll first review a little bit about Sass & CSS, then practice writing building our own custom stylesheets for our ____ app**</p></center>


---

##  {#css-review data-menu-title="CSS Review/Resources"}

<div class="slide-title-smaller">Resources for a deeper dive</div>

<p class="body-text">We'll be doing a rather high-level and quick overview of Sass & CSS today, though I encourage you to check out the [Customizing Quarto Websites](https://ucsb-meds.github.io/customizing-quarto-websites/#/title-slide) workshop, which takes a deeper dive.</p>

. . . 

<p class="body-text topbr">[W3Schools](https://www.w3schools.com/css/default.asp) is my favorite online resource for all-things CSS -- in addition to really digestible descriptions and examples, they also offer interactive tutorials to get your hands on updating (and breaking) code (in a safe space, of course).</p>

---

##  {#what-are-sass-css data-menu-title="What are Sass & CSS"}

<div class="slide-title-smaller">What even is Sass? CSS?</div>

- Sass stands for Syntactically Awesome Stylesheets and is an extension to CSS 
- Sass is a CSS preprocessor – this means that Sass allows web developers to use Sass syntax and features that don’t currently exist in CSS (e.g. variables, which we’ll be using today), then converts that Sass code into standard CSS (browsers don’t understand Sass code, but do understand CSS).


---

##  {#css-3ways data-menu-title="3 ways to add CSS styling"}

<div class="slide-title-smaller">3 ways to add CSS styling to your apps</div>

<p class="small-text">You can **(1)** add styling directly to `tags`, **(2)** add CSS rules to your `header`, and/or **(3)** build a stylesheet that is applied to your app. **Creating a stylesheet is the preferred approach, and you should do this whenever possible.**</p>

::: {.panel-tabset}

## tags

<p class="small-text">Add styling directly to tags. **It's best not to use a lot of these!** It's easy to lose track of your "in-line" styling in large projects, you can't reuse rules easily, it's hard to keep styling consistent, and it's difficult to implement large stylistic changes.</p>

```{r}
#| eval: false
#| echo: true
```

## header

<p class="small-text">Add CSS rules to your app's header (`tags$head`). This is a little bit better than option 1 since it allows for the reuse of rules, however, styles can't be cached (i.e. saved for future usage when you reopen your app).</p>

```{r}
#| eval: false
#| echo: true
```

## stylesheets

<p class="small-text">Build a stylesheet inside your app's `www/` directory and import styles into your app's header. **This is the most ideal approach** -- it allows for style reuse, caching, all styling is contained in one spot,</p>

```{r}
#| eval: false
#| echo: true
```

:::
