---
format: revealjs
---

##  {#debugging data-menu-title="~~~ Debugging ~~~" background="#053660"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">`r fontawesome::fa("bug", fill = "#d2e3f3", a11y = "sem")` Debugging</p>
<p class="caption-text">*Like any code, you're bound to run into errors as you're developing your shiny app(s). However, Shiny can be particularly challenging to debug. In this section, we'll review a few approaches for solving pesky issues.*</p>
</div>

---

##  {#LO-debugging data-menu-title="Learning Objectives - Debugging"}

<div class="slide-title">`r fontawesome::fa("book-open", fill = "#05859B", a11y = "sem")` Learning Objectives for Debugging</div>

<p class="medium-body-text bottombr">After this section, you should:</p>

. . . 

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` tbd</p>

. . . 

<p class="medium-body-text topbr">New packages used:</p> 

. . . 

<p class="small-text">`r fontawesome::fa("box-open", fill = "#05859B", a11y = "sem")` `{reactlog}`:  tbd</p>

---

##  {#debugging-challenges data-menu-title="Debugging is challenging"}

<div class="slide-title">Debugging can be challenging</div>

<p class="body-text">Shiny apps can be particularly challenging to debug for a few reasons:</p>

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` Shiny is **reactive**, so code execution isn't as linear as other code that you're likely more familiar with (e.g. analytical pipelines written in "normal" R scripts, where each line of code is executed in succession)</p>

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` Shiny code runs behind a web server *and* the Shiny framework itself, which can obscure what's going on</p>

<br>

. . . 

<p class="body-text">While there are a number of different tools/strategies for debugging Shiny apps, I find myself turning to one (or more) of these approaches most often:</p>

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` isolating problematic code by commenting out as much correctly-functioning code as possible</p>

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` adding messages to my reactives</p>

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` using `reactlog` to trace errors</p>

<br>

. . . 

<p class="body-text">We'll touch on each of these, briefly, but be sure to check out the Shiny article, [Debugging Shiny applications](https://shiny.rstudio.com/articles/debugging.html) and [Mastering Shiny Ch. 5.2](https://mastering-shiny.org/action-workflow.html#debugging), by Hadley Wickham for more approaches, details, and examples.</p>

---

##  {#non-buggy-app data-menu-title="A correctly functioning app"}

<div class="slide-title">I'm building an app that should look like this...</div>

<p class="small-text">In **Tab 1**, both the image and text should update whenever a new radio button is chosen. In **Tab 2**, the scatterplot should update so that only data points for penguins with body masses within our chosen range are displayed. **Find the source code for this functioning app [here](https://github.com/samanthacsik/EDS430-shiny-app/tree/main/reactlog-working).**</p>

<center><img src="images/working-app.gif" alt="" width="650"/></center>

---

##  {#buggy-app data-menu-title="A buggy app"}

<div class="slide-title">...but let's say it actually looks like this:</div>

<p class="small-text">In **Tab 1**, only the image updates whenever a new radio button is chosen, and text is missing altogether. In **Tab 2**, the scatterplot updates as expected whenever the body mass range is changed. **Find the source code for this buggy app [here](https://github.com/samanthacsik/EDS430-shiny-app/tree/main/reactlog-broken).**</p>

<center><img src="images/buggy-app.gif" alt="" width="650"/></center>

---

##  {#comment-out-code data-menu-title="Comment out code"}

<div class="slide-title-smaller">Start by commenting out functioning code</div>

<p class="small-text">Even though this is a relatively small/simple app, there is still code that, for lack of a better term, gets in the way. After a quick assessment, my reactive scatterplot on Tab 2 appears to be working as expected. To help simplify the amount of code I need to look at, I'll start by commenting out all UI elements (`sliderInput` & `plotOutput`) and server logic for building that reactive plot.</p>

::: {.panel-tabset}

## `app.R`
```{r}
#| eval: false
#| echo: true
# load packages ----
library(shiny)
library(reactlog)

# ui ----
ui <- fluidPage(
  
  tabsetPanel(
    
    # tab 1 ----
    tabPanel(title = "Tab 1",
             
             # radio button input ----
             radioButtons(
               inputId = "img", label = "Choose a penguin to display:",
               choices = c("All penguins", "Sassy chinstrap", "Staring gentoo", "Adorable adelie"),
               selected = "All penguins"),
             
             # text output ----
             textOutput(outputId = "penguin_text"),
             
             # img output ----
             imageOutput(outputId = "penguin_img")
             
    ), # END tab 1
    
    # tab 2 ----
    tabPanel(title = "Tab 2"#,
             
             # # body mass slider input ----
             # sliderInput(inputId = "body_mass", label = "Select a range of body masses (g)",
             #             min = 2700, max = 6300, value = c(3000, 4000)),
             
             # # body mass plot output ----
             # plotOutput(outputId = "bodyMass_scatterPlot")
             
    ) # END tab 2
    
  ) # END tabsetPanel
  
) # END fluidPage


# server ----
server <- function(input, output){
  
  # render penguin text ----
  output$penguins_text <- renderText({
    
    message("Displaying text...")
    
    if(input$img == "All penguins"){
      "Meet all of our lovely penguins species!"
    }
    else if(input$img == "Sassy chinstrap"){
      "Chinstraps get their name from the thin black line that runs under their chins"
    }
    else if(input$img == "Staring gentoo"){
      "Gentoos stand out because of their bright orange bills and feet"
    }
    else if(input$img == "Adorable adelie"){
      "Adelie penguins are my personal favorite <3"
    }
  }) # END renderText
  
  
  # render penguin images ----
  output$penguin_img <- renderImage({
    
    message("Displaying image...")
    
    if(input$img == "All penguins"){
      list(src = "www/all_penguins.jpeg", height = 240, width = 300)
    }
    else if(input$img == "Sassy chinstrap"){
      list(src = "www/chinstrap.jpeg", height = 240, width = 300)
    }
    else if(input$img == "Staring gentoo"){
      list(src = "www/gentoo.jpeg", height = 240, width = 300)
    }
    else if(input$img == "Adorable adelie"){
      list(src = "www/adelie.gif", height = 240, width = 300)
    }
    
  }, deleteFile = FALSE) # END renderImage
  
  
  # # filter body masses ----
  # body_mass_df <- reactive({
  #   penguins |>
  #     filter(body_mass_g %in% input$body_mass[1]:input$body_mass[2]) # return observations where body_mass_g is "in" the set of options provided by the user in the sliderInput
  # }) # END filter body masses
  
  
  # # render the scatterplot output ----
  # output$bodyMass_scatterPlot <- renderPlot({
  #   
  #   ggplot(na.omit(body_mass_df()),
  #          aes(x = flipper_length_mm, y = bill_length_mm,
  #              color = species, shape = species)) +
  #     geom_point() +
  #     scale_color_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
  #     scale_shape_manual(values = c("Adelie" = 19, "Chinstrap" = 17, "Gentoo" = 15)) +
  #     labs(x = "Flipper length (mm)", y = "Bill length (mm)",
  #          color = "Penguin species", shape = "Penguin species") +
  #     theme_minimal() +
  #     theme(legend.position = c(0.85, 0.2),
  #           legend.background = element_rect(color = "white"))
  #   
  # }) # END render scatterplot
  
  
} # END server

# combine UI & server into an app ----
shinyApp(ui = ui, server = server)
```

## app preview

<center><img src="images/commented-out-code.gif" alt="" width="650"/></center>

:::
