---
format: revealjs
---

##  {#setup data-menu-title="Setup" background="#053660"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">`r fontawesome::fa("play", fill = "#d2e3f3", a11y = "sem")` Setting up your Shiny app</p>
<p class="caption-text">*Let's start with some standard operating procedures -- things you'll do each time you begin a new shiny app.*</p>
</div>

---

##  {#github-repo data-menu-title="Create GitHub Repo"}

<div class="slide-title bottombr">Create your GitHub repo</div>

<p class="body-text">Let's start by creating a GitHub repo to house our soon-to-be app, then we'll clone our repo to our computer. I'm using RStudio to clone my repo in the example below, but you can also do this via the command line using `git clone <repo-url>`.</p>

<center><img src="images/create-repo.gif" alt="A gif demonstrating how to set up a GitHub repo and how to clone that repo to your computer. Start by clicking on the 'Repositories' tab from your GitHub profile, then click the green 'New' button. Give your repo a name, check the box next to 'Add a README file', Add a .gitigore by choosing 'R' from the drop down menu, then click the green 'Create repository' button. From your repo landing page, click the green 'Code' button, then copy the URL to your clipboard. In RStudio, select 'New Project' from the top left 'Project' button, select 'Version Control', then 'Git', and paste your URL in the 'Repository URL field'. Your repo name should be auto completed in the 'Project directory name:' field, but if not, press the 'Tab' key. Click 'Create Project' to complete the process." width="700"/></center>

---

##  {#repo-structure data-menu-title="Repo Structure"}

<div class="slide-title">Shiny app repo structure</div>

<p class="small-text">Not much is *required* to make a functional app (which is awesome) -- for a basic app, you really just need an `app.R` file where you'll write the code for your UI and server. To stay organized, we'll place `app.R` into a subdirectory (e.g. `/myapp`), which will also house any dependencies (e.g. other scripts/files/etc.) used by `app.R`.</p>

<center><img src="images/repo_structure_details.png" alt="" width="900"/></center>

---

##  {#one-file data-menu-title="One-file app"}

<div class="slide-title">All Shiny apps begin (in almost) the same way</div>

<p class="small-text">You can create your app using RStudio's built-in Shiny app template (e.g. File > New Project... > New Directory > Shiny Application), but it's just as easy to create it from scratch (and you'll memorize the structure faster!). Let's do that now.</p>

. . .

<p class="small-text topbr">First, we'll learn how to create a **one file shiny app**:</p>

<p class="small-text">**1.** In your project repo, create a new subdirectory to house your app -- I'm calling mine, `one-file-app`.</p>

. . . 

<p class="small-text">**2.** Create a new R script inside `/one-file-app` and name it `app.R` -- you **must** name your script `app.R`. Copy the following code into `app.R`.<p>

```{r}
#| eval: false
#| echo: true
# load packages ----
library(shiny)

# user interface ----
ui <- fluidPage()

# server instructions ----
server <- function(input, output) {}

# combine UI & server into an app ----
shinyApp(ui = ui, server = server)
```

<p class="smaller-text">**Tip:** Use code sections (denoted by `# some text ----`) to make navigating different sections of your app code a bit easier. Code sections will appear in your document outline (find the button at the top right corner of the script/editor panel).</p>

---

##  {#run-app data-menu-title="Run Your App"}

<div class="slide-title">Run your app</div>

<p class="small-text">Once you have saved your `app.R` file, the "Run" code button should turn into a "Run App" button that looks like:</span> <img src="images/run_app.png" alt="A green, right facing triangular arrow next to the words 'Run App'" style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/>. Click that button to run your app!</p>

<p class="small-text topbr">You won't see much yet, as we have only built a blank app (but a functioning app, nonetheless!). In your RStudio console, you should see something like: `Listening on http://127.0.0.1:XXXX`, which is the URL where your app can be found. 127.0.0.1 is a standard address that means "this computer," and the last four digits represent a randomly assigned port number.</p>

<p class="small-text topbr">You should also notice a red stop sign, <img src="images/stop.png" alt="A red hexagon with the word 'STOP' printed in white across the center." style="display: inline-block; margin: 0; position: relative; top: 3px; width:15px;height:15px;"/>, appear in the top right corner of your console indicating that R is busy--this is because your R session is currently acting as your Shiny app server and listening for any user interaction with your app. Because of this, you won't be able to run any commands in the console until you quit your app. Do so by pressing the stop button.</p>

::: {.column width="50%"}
<center><img src="images/blank_app.png" alt="" width="700"/></center>
:::

::: {.column width="50%"}
<center><img src="images/run_app_RStudio.png" alt="" width="700"/></center>
:::


