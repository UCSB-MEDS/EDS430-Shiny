---
format: revealjs
---

##  {#what-is-shiny data-menu-title="~~~ What is Shiny? ~~~" background="#053660"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">`r fontawesome::fa("r-project", fill = "#d2e3f3", a11y = "sem")` What is Shiny?</p>
<p class="caption-text">*Think interactive web pages built by people who love to code in R (i.e. hopefully many of you!), no JavaScript experience necessary.*</p>
</div>

---

##  {#easy-web-apps data-menu-title="Shiny = easy web apps"}

<div class="slide-title">Shiny makes building web apps easy</div>

<p class="quote-text-bg body-text bottombr">*"**Shiny is an R package that makes it easy to build interactive web apps straight from R.** You can host standalone apps on a webpage or embed them in [R Markdown](https://rmarkdown.rstudio.com/?_ga=2.5356915.1997816511.1640293283-2019993402.1637352626) documents or build [dashboards](http://rstudio.github.io/shinydashboard/?_ga=2.5356915.1997816511.1640293283-2019993402.1637352626). You can also extend your Shiny apps with [CSS themes](http://rstudio.github.io/shinythemes/?_ga=2.94499804.1997816511.1640293283-2019993402.1637352626), [htmlwidgets](http://www.htmlwidgets.org/), and JavaScript [actions.](https://github.com/daattali/shinyjs/blob/master/README.md)"* **- RStudio**</p>

<center><img src="images/worldbank-shiny.gif" alt="A gif of Andre Duarte's 'Worldbank-Shiny' app. On the lefthand side of the app, the title 'Gapminder Interactive Plot' sits above a series of three widgets. The first is a dropdown menu where the user can select a region (e.g. Europe & Central Asia) or view all regions at the same time. The next two widgets are slider inputs -- the first allows the user to select a year between 1960 and 2014, and the second allows the user to select a population size between 500 and 5000. On the right hand side of the app is a bubble plot of Fertility Rate vs. Life Expectancy, which updates as inputs are changed by the user. Hovering a bubble displays thge corresponding Country, Region, Population, Life Expectancy, and Fertility Rate." width="700"/></center>

<center><p class="small-text gray-text topbr">[Worldbank-Shiny](https://github.com/aguimaraesduarte/WorldBank-Shiny) app to visualize fertility rate vs. life expectancy from 1960 to 2015, by [Andre Duarte](https://github.com/aguimaraesduarte)</p></center>

---

##  {#app-anatomy data-menu-title="~~~ Anatomy of an app ~~~" background="#053660"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">`r fontawesome::fa("puzzle-piece", fill = "#d2e3f3", a11y = "sem")` The anatomy of a Shiny app</p>
<p class="caption-text">*What does a Shiny app look like under the hood?*</p>
</div>

---

##  {#basic-anatomy data-menu-title="Basic Anatomy"}

<div class="slide-title">The basic anatomy of a Shiny app</div>

<p class="body-text bottombr">Shiny apps are composed in *two* parts: (1) a **web page** that displays the app to a user (i.e. the **user interface**, or **UI** for short), and (2) a **computer** that powers the app (i.e. the **server**)</p>

<center><img src="images/basic_shiny_app.png" alt="A simple schematic of a Shiny app, which includes the User Interface (UI, colored in blue) and the Server (colored in orange). The UI creates what the user will see and interact with, while the server builds the outputs that react and update based on user inputs." width="675"/></center>

<p class="body-text bottombr">The **UI** controls the **layout and appearance** of your app and is written in HTML (except we use functions from the `{shiny}` package to write that HTML). The **server** handles the **logic** of the app -- in other words, it is a set of instructions that tells the webpage what to display when a user interacts with it.</p>

---

##  {#widgets data-menu-title="Widgets"}

<div class="slide-title">Widgets are web elements that users can interact with via the UI</div>

::::{.columns}

::: {.column width="60%"}
<center><img src="images/basic_widgets.png" alt="Examples of Shiny's pre-built widget options. These include buttons, single checkbox, checkbox groups, date input, date range, file input, numeric input, radio buttons, select box, sliders, and text input. The default color scheme is black and gray with selections highlighted in blue." width="675"/></center>
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
<br>

<p class="body-text bottombr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` Widgets collect information from the user which is then used to update outputs created in the server.</p>

<p class="body-text topbr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` Shiny comes with a set of of [standard widgets](https://shiny.rstudio.com/tutorial/written-tutorial/lesson3/) (see left), but you can also explore widget extensions using a variety of other packages (e.g. [`{shinyWidgets}`](https://github.com/dreamRs/shinyWidgets), [`{DT}`](https://rstudio.github.io/DT/), [`{plotly}`](https://plotly.com/r/))</p>
:::

::::

---

##  {#reactivity-intro data-menu-title="Reactivity Intro"}

<div class="slide-title">Reactivity: a brief intro</div>

<p class="body-text bottombr">Reactivity is what makes Shiny apps responsive i.e. it lets the app instantly update itself whenever the user makes a change. At a very basic level, it looks something like this:</p>

<center><img src="images/reactivity_intro.png" alt="A schematic of Shiny reactivity. The UI is represented by a light blue box. Inside the blue UI box, there is a radio button widget that says, 'Make a choice:' and three round radio buttons beneath it. Underneath that, there is a placeholder space for a reactive output to be created by the server. The server is to the left of the UI and is represented by an orange box. At a basic level, reactivity occurs after the following steps: (1) A widget gets information from a user which (2) is then passed to the server where it is used to update a data frame based on the users choice. (3) The new data frame is used to update outputs in the server, and (4) those outputs are then rendered in the UI." width="750"/></center>

<p class="body-text bottombr">Check out Garrett Grolemund's article, [How to understand reactivity in R ](https://shiny.rstudio.com/articles/understanding-reactivity.html) for a more detailed overview of Shiny reactivity.</p>

---

##  {#examples-please data-menu-title="~~~ Examples Please? ~~~" background="#053660"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">`r fontawesome::fa("laptop-code", fill = "#d2e3f3", a11y = "sem")` Can I see an example please?</p>
<p class="caption-text">*I'm glad you asked!*</p>
</div>

---

##  {#shinyapp-examples data-menu-title="Examples of shiny apps"}

<div class="slide-title bottombr">Example shiny apps built by some familiar folks `r fontawesome::fa("face-smile", fill = "#05859B", a11y = "sem")`</div>

<p class="body-text">`r fontawesome::fa("fish-fins", fill = "#05859B", a11y = "sem")` [Moorea Coral Reef LTER Shiny Application](https://shinyapps.bren.ucsb.edu/ShinyAppMooreaViz/) ([**source code**](hhttps://github.com/MCR-LTER/MEDSttps://github.com/UCSB-MEDS/shiny-dashboard)), *by MEDS 2022 alumni, [Allie Cole](https://www.linkedin.com/in/allie-ingrid-cole-60351a1ba/), [Felicia Cruz](https://www.linkedin.com/in/cruz-felicia/), [Jake Eisaguirre](https://jake-eisaguirre.github.io/) & [Charles Henrickson](https://www.linkedin.com/in/charles-hendrickson-0001a0223/) as part of their MEDS capstone project* -- visualize spatial and temporal patterns of coral reef stressors surrounding Moorea, French Polyneisa</p>

---

##  {#built-in-examples data-menu-title="Built-in Examples"}

<div class="slide-title">The Shiny packages comes with 11 built-in examples</div>

<p class="small-text bottombr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` Check out the available Shiny app examples by running this code in your console:</p>

```{r}
#| eval: false
#| echo: true
library(shiny)
runExample(example = NA)
```

. . .

<p class="small-text topbr bottombr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` Run the first example, which plots Râ€™s built-in `faithful` data set with a configurable number of bins:</p>

```{r}
#| eval: false
#| echo: true
runExample("01_hello")
```

<p class="small-text topbr bottombr">Change the number of bins using the `sliderInput` widget and watch the histogram re-render.</p>

. . . 

<p class="small-text topbr bottombr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` These working examples also come paired with source code for you to see how the app is built. For example, the `sliderInput` is built with the following code:</p>

```{r}
#| eval: false
#| echo: true
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
            label = "Number of bins:",
             min = 1,
             max = 50,
             value = 30)
```

---

##  {#lets-build-our-own data-menu-title="Let's Build Our Own"}

<div class="slide-title">Let's build our own!</div>

<p class="body-text"> We're going to cover a lot over our two days. Below is a general **outline** of all the apps we'll build during our two days together. At any point, you may reference the [GitHub repository](https://github.com/samanthacsik/EDS430-shiny-app) with source code for each complete app.</p>

::: {.panel-tabset}

## Day 1

<p class="small-text topbr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` a single-file Shiny app with two reactive outputs (a scatterplot & a DT data table) -- [`r fontawesome::fa("github", fill = "#05859B", a11y = "sem")` source code](https://github.com/samanthacsik/EDS430-shiny-app/tree/main/one-file-app)</p>
<p class="small-text topbr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` a two-file shiny app with two reactive plots (a scatterplot and a histogram) -- we'll also learn how to use layout functions to create a more visually-pleasing (and organized) UI, and creating multiple inputs that update the same output. -- [`r fontawesome::fa("github", fill = "#05859B", a11y = "sem")` source code](https://github.com/samanthacsik/EDS430-shiny-app/tree/main/two-file-app)</p>

## Day 2

<p class="small-text topbr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` a shiny dashboard
with a reactive leaflet map -- [`r fontawesome::fa("github", fill = "#05859B", a11y = "sem")` source code](https://github.com/samanthacsik/EDS430-shiny-app/tree/main/shinydashboard)</p>

:::


