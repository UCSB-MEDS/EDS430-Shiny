---
format: revealjs
---

##  {#second-penguins data-menu-title="Next up, penguins"}

<p class="slide-title">Add data viz: Next up, penguins</p>

<p class="small-text bottombr">We'll be using the `penguins` dataset from the [`{palmerpenguins}` package](https://allisonhorst.github.io/palmerpenguins/) to create our second reactive plot. These data contain penguin (genus *Pygoscelis*) body size measurements collected from three islands in the Palmer Archipelago, Antarctica, as part of the [Palmer Station LTER](https://pallter.marine.rutgers.edu/). Original data can be found on the EDI Data Portal ([Adélie data](https://portal.edirepository.org/nis/mapbrowse?packageid=knb-lter-pal.219.5), [Gentoo data](https://portal.edirepository.org/nis/mapbrowse?packageid=knb-lter-pal.220.5), and [Chinstrap data](https://portal.edirepository.org/nis/mapbrowse?packageid=knb-lter-pal.221.6)). Refer back to [this slide](https://ucsb-meds.github.io/EDS430-Shiny/#/app2-plots) to revisit our practice data wrangling & visualization script.</p>

<br>

<center><img src="images/meet_the_penguins.png" alt="A cartoon drawing of Chinstrap (atop a purple background), Gentoo (atop a green background) and Adélie (atop an orange background) penguins." width="600"/></center>

<center><p class="small-text gray-text">Artwork by [@allison_horst](https://allisonhorst.com/)</p>


---

##  {#exercise3-prompt data-menu-title="** Exercise 3 Prompt **"}

<div class="slide-title-smaller">`r fontawesome::fa("question", fill = "#05859B", a11y = "sem")` Exercise 3: Add a reactive plot to the 'Penguins' tab</div>

<p class="small-text">Working alone or in groups, add a reactive histogram of penguin flipper lengths (using the `penguins` data set from the [`{palmerpenguins}` package](https://allisonhorst.github.io/palmerpenguins/)) to the **Penguins** tab. Your plot should have the following features and look like the example below, when complete:</p>

:::: {.columns}

::: {.column width="45%"}
<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` data colored by penguin `species`</p>

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` a `shinyWidgets::pickerInput` that allows users to filter data based on `island`, and that includes buttons to **Select All** / **Deselect All** island options at once</p>

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` a `shiny::sliderInput` that allows users to change the number of histogram bins and that by default, displays a histogram with **25** bins</p>

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` the two widgets should be placed in the `sidebarPanel` and the reactive histogram should be placed in the `mainPanel` of the **Penguins** tab</p>
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
<center><img src="images/penguin_plot.gif" alt="A user navigates to the Penguins tab of our app to reveal a histogram of penguins flipper lengths. Data are colored by species (Adelie = orange, Chinstrap = purple, Gentoo = green). The user uses a pickerInput to filter data based on the island where they were collected. The user also adjust the bin number using a sliderInput." width="750"/></center>
:::

::::

<center><p class="medium-body-text">See next slide for some tips on getting started!</p></center>

---

##  {#exercise3-tips data-menu-title="** Exercise 3 Tips **"}

<div class="slide-title-smaller">`r fontawesome::fa("lightbulb", fill = "#05859B", a11y = "sem")` Exercise 3: Tips</div>

<p class="body-text topbr">**Tips:**</p>

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` Remember to load the `palmerpenguins` package at the top of `global.R` so that your app can find the data</p>

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` Add your widgets to the `sidebarPanel` and your plot output to the `mainPanel` of the **Penguins** tab -- look for that placeholder text we added earlier to help place your new code in the correct spot within your UI!</p>

<p class="small-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` Try changing the histogram bin number in your practice code script first, before attempting to make it reactive</p>

<p class="body-text topbr">**And remember** to follow the our three steps for building reactive outputs (1. add input to UI, 2. add output to UI, 3. tell server how to assemble inputs into outputs)!</p>

<br>
<br>
<br>

<center><p class="medium-body-text">See next slide for a solution!</p></center>

---

##  {#exercise3-solution data-menu-title="** Exercise 3 Solution **"}

<div class="slide-title-smaller">`r fontawesome::fa("check", fill = "#05859B", a11y = "sem")` Exercise 3: A solution</div>

::: {.panel-tabset}

## `global.R`

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "4"
# LOAD LIBRARIES ----
library(shiny)
library(lterdatasampler)
library(palmerpenguins)
library(tidyverse)
library(shinyWidgets)

# DATA WRANGLING ----

# trout data
clean_trout <- and_vertebrates |>
  filter(species == c("Cutthroat trout")) |>
  select(sampledate, section, species, length_mm = length_1_mm, weight_g, channel_type = unittype) |> 
  mutate(channel_type = case_when(
    channel_type == "C" ~ "cascade",
    channel_type == "I" ~ "riffle",
    channel_type =="IP" ~ "isolated pool",
    channel_type =="P" ~ "pool",
    channel_type =="R" ~ "rapid",
    channel_type =="S" ~ "step (small falls)",
    channel_type =="SC" ~ "side channel"
  )) |> 
  mutate(section = case_when(
    section == "CC" ~ "clear cut forest",
    section == "OG" ~ "old growth forest"
  )) |> 
  drop_na()

# GGPLOT THEME ----
myCustomTheme <- theme_light() +
  theme(#text = element_text(family = "mono"), 
    axis.text = element_text(color = "black", size = 12),
    axis.title = element_text(size = 14, face = "bold"),
    legend.title = element_text(size = 14, face = "bold"),
    legend.text = element_text(size = 13),
    legend.position = "bottom",
    panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.7))
```

## `ui.R`

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "61-82"
ui <- navbarPage(
  
  title = "LTER Animal Data Explorer",
  
  # (Page 1) intro tabPanel ----
  tabPanel(title = "About this App",
           
  ), # END (Page 1) intro tabPanel
  
  # (Page 2) data viz tabPanel ----
  tabPanel(title = "Explore the Data",
           
           # tabsetPanel to contain tabs for data viz ----
           tabsetPanel(
             
             # trout tabPanel ----
             tabPanel(title = "Trout",
                      
                      # trout plot sidebarLayout ----
                      sidebarLayout(
                        
                        # trout plot sidebarPanel ----
                        sidebarPanel(
                          
                          # channel type pickerInput ----
                          pickerInput(inputId = "channel_type_input", label = "Select channel type(s):",
                                      choices = unique(clean_trout$channel_type),
                                      options = pickerOptions(actionsBox = TRUE),
                                      selected = c("cascade", "pool"),
                                      multiple = TRUE), # END channel type pickerInput
                          
                          # # section checkboxGroupInput ----
                          checkboxGroupButtons(inputId = "section_input", label = "Select a sampling section(s):",
                                               choices = c("clear cut forest", "old growth forest"),
                                               selected = c("clear cut forest", "old growth forest"),
                                               individual = FALSE, justified = TRUE, size = "sm",
                                               checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon"))), # END section checkboxGroupInput
                          
                        ), # END trout plot sidebarPanel
                        
                        # trout plot mainPanel ----
                        mainPanel(
                          
                          plotOutput(outputId = "trout_scatterplot")
                          
                        ) # END trout plot mainPanel
                        
                      ) # END trout plot sidebarLayout
                      
             ), # END trout tabPanel 
             
             # penguin tabPanel ----
             tabPanel(title = "Penguins",
                      
                      # penguin plot sidebarLayout ----
                      sidebarLayout(
                        
                        # penguin plot sidebarPanel ----
                        sidebarPanel(
                          
                          # island pickerInput ----
                          pickerInput(inputId = "penguin_island_input", label = "Select an island(s):",
                                      choices = c("Torgersen", "Dream", "Biscoe"),
                                      options = pickerOptions(actionsBox = TRUE),
                                      selected = c("Torgersen", "Dream", "Biscoe"),
                                      multiple = T), # END island pickerInput
                          
                          # bin number sliderInput ----
                          sliderInput(inputId = "bin_num_input", label = "Select number of bins:",
                                      value = 25, max = 100, min = 1), # END bin number sliderInput
                          
                        ), # END penguin plot sidebarPanel
                        
                        # penguin plot mainPanel ----
                        mainPanel(
                          
                          plotOutput(outputId = "flipperLength_histogram") 
                          
                        ) # END penguin plot mainPanel
                        
                      ) # END penguin plot sidebarLayout
                      
             ) # END penguin tabPanel
             
           ) # END tabsetPanel
           
  ) # END (Page 2) data viz tabPanel
  
) # END navbarPage
```

## `server.R`

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "28-47"
server <- function(input, output) {
  
  # filter for channel types ----
  trout_filtered_df <- reactive({

      clean_trout |>
        filter(channel_type %in% c(input$channel_type_input)) |>
        filter(section %in% c(input$section_input))
        
    })

  # trout scatterplot ----
  output$trout_scatterplot <- renderPlot({

    ggplot(trout_filtered_df(), aes(x = length_mm, y = weight_g, color = channel_type, shape = channel_type)) +
      geom_point(alpha = 0.7, size = 5) +
      scale_color_manual(values = c("cascade" = "#2E2585", "riffle" = "#337538", "isolated pool" = "#DCCD7D",
                                    "pool" = "#5DA899", "rapid" = "#C16A77", "step (small falls)" = "#9F4A96",
                                    "side channel" = "#94CBEC")) +
      scale_shape_manual(values = c("cascade" = 15, "riffle" = 17, "isolated pool" = 19,
                                    "pool" = 18, "rapid" = 8, "step (small falls)" = 23,
                                    "side channel" = 25)) +
      labs(x = "Trout Length (mm)", y = "Trout Weight (g)", color = "Channel Type", shape = "Channel Type") +
      myCustomTheme

  })
  
  # filter for island ----
  island_df <- reactive({

    penguins %>%
      filter(island %in% input$penguin_island)

  })

  # render the flipper length histogram ----
  output$flipperLength_histogram <- renderPlot({

    ggplot(na.omit(island_df()), aes(x = flipper_length_mm, fill = species)) +
      geom_histogram(alpha = 0.6, bins = input$bin_num_input) +
      scale_fill_manual(values = c("Adelie" = "#FEA346", "Chinstrap" = "#B251F1", "Gentoo" = "#4BA4A4")) +
      labs(x = "Flipper length (mm)", y = "Frequency",
           fill = "Penguin species") +
      myCustomTheme
    
  })
  
} # END server
```

:::

